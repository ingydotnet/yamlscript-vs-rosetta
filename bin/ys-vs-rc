#!/usr/bin/env ys-0
source <(curl '-s' 'https://yamlscript.org/run-ys') "$@" :

defn main(*args):
  opts =: get-opts(args)
  conf =: get-config(opts)

  when conf.task-list: list-tasks(conf.>)

  markdown =: generate-markdown(conf)

  if conf.gist:
    say: post-gist(markdown conf)
    else:
      file =: conf.markdown-file
      spit file: markdown
      say: "Generated '$file'"

defn list-tasks(conf):
  tasks =: sh("find $(conf.rcdl)/YAMLScript -type l")
           .out:lines.map(\(replace(_ qr('.*/') '')))

  each task tasks:sort:
    say: task

  exit: 0

defn generate-markdown(conf):
  :: Generate a markdown page comparing YAMLScript's Rosetta Code solutions to
     those in other languages.

  RCDT =: conf.rcdt
  task =: conf.task
  url-task =: conf.url-task
  when-not task:
    die: |
      No task (program) name specified to compare.
      Add a task=<task-name> argument.
      Use '$(conf.self) task-list' to list all task names.

  markdown =: |
    # YAMLScript Comparison for '$task'

    This page compares the **[YAMLScript](https://yamlscript.org)** code
    for the **[Rosetta Code](https://rosettacode.org/)** task '**[$task](
    https://rosettacode.org/wiki/$url-task)**' with code from other
    [Rosetta Code Languages](
    https://rosettacode.org/wiki/Category:Programming_Languages#mw-subcategories
    ).

    Click on the <b>â€£</b> arrow for a language below to expand its code.

    This Markdown page was generated by this [YAMLScript program](
    https://github.com/ingydotnet/yamlscript-vs-rosetta/blob/main/bin/ys-vs-rc).

    $about-task(conf)

    ----

  file =:
    io/file("$(conf.rcdl)/YAMLScript/$task"
            ):file-seq.map(str).grep(/\.\w+$/).0

  when-not file:
    die: "Can't find YAMLScript solution file for '$task'"

  text =: file:slurp:chomp

  yamlscript =:
    if ENV.YSVSRC_CLOSED:
      then: |
        <details><summary>
        <b>
        <a href="https://rosettacode.org/wiki/$url-task#YAMLScript">YAMLScript</a>
        </b>
        ($(text:lines.#) lines)
        </summary>

        ```yaml
        $text
        ```

        </details>

      else: |

        **[YAMLScript](https://rosettacode.org/wiki/$url-task#YAMLScript)**
        ($(text:lines.#) lines)

        ```yaml
        $text
        ```

  yamlscript +=: |+

    ----

    ## $(conf.title)

  lang-list =:
    filter _ conf.lang-list:
      fn(lang):
        name =: conf.lang-info.$lang.name || die(111)
        fs-e: "$(conf.rcdt)/$(conf.task)/$name"

  others =:
    reduce _ '' lang-list:
      fn(markdown lang):
        name ext =: conf.lang-info.$lang.slice(qw(name ext))

        file =:
          io/file("$(conf.rcdl)/$name/$task"):file-seq
          .map(str):sort.grep(qr("\\.${ext}$")).0

        if-not file:
          then:
            warn: "Can't find '$name' solution file for '$task'"
            =>: markdown
          else:
            text =: file:slurp:chomp
            markdown +: |
              <details><summary>
              <b>
              <a href="https://rosettacode.org/wiki/$url-task#$name">$name</a>
              </b>
              ($(text:lines.#) lines)
              </summary>

              ```$ext
              $text
              ```

              </details>

  about =: slurp("$(conf.root)/About.md")

  (markdown + yamlscript + others) +: |

    ----

    <details><summary><b>About</b></summary>

    $about

    </details>

defn about-task(conf):
  RCDT =: conf.rcdt
  task =: conf.task
  text =: slurp("$RCDT/$task/00-TASK.txt")
  pandoc =: sh('which pandoc').out
  when text.? && pandoc.?:
    markdown =:
      sh({:in text} 'pandoc --from=mediawiki --to=gfm').out
    =>: |
      ----

      <details><summary><strong>About Task '$task'</strong></summary>

      $text

      </details>


defn post-gist(markdown conf):
  api-url =: 'https://api.github.com/gists'
  api-key =: conf.token

  when-not api-key:
    die: "Need token=... or YSVSRC_GH_TOKEN GitHub token to post gist"

  request =::
    :headers:
      :Content-Type: application/json
      :Authorization:: "Bearer $api-key"
    :body::
      json/dump::
        :description: ''
        :public: false
        :files:
          ! conf.markdown-file:
            :content:: markdown

  response =:
    try:
      http/post api-url: request
      catch e:
        e =: ex-data(e)
        say:
          yaml/dump::
            status:: e.status
            body:: e.body:json/load
            api-key:: api-key
        exit: 1

  when-not 200 <= response.status <= 201:
    die: ("Gist request failed:\n\n" +
          json/load(response.body):yaml/dump)

  yaml/dump: json/load(response.body).html_url


defn get-opts(args):
  root =: FILE:fs-dirname:fs-dirname

  defaults =::
    config:: "$root/config.yaml"
    gist:: boolean(ENV.YSVSRC_GH_TOKEN)
    token:: ENV.YSVSRC_GH_TOKEN
    root:: root
    list: false

  merge defaults:
    reduce _ {} args:
      fn(opts arg):
        condp re-matches arg:
          /task-list/:
            assoc(opts 'task-list' true)
          /task=.+/:
            assoc(opts 'task' arg.replace(/.*=/ ''))
          /token=.+/:
            assoc(opts 'token' arg.replace(/.*=/ ''))
          /gist=(true|false)/:
            assoc(opts 'gist' arg.replace(/.*=/ '').eq('true'))
          /config=.+/:
            config =: arg.replace(/.*=/ '')
            when-not fs-f(config):
              die: "Config file 'config' does not exist"
            assoc opts 'config': config
          else:
            die("Invalid argument '$arg'")

defn get-config(opts):
  rosettacodedata-url =:
    'https://github.com/acmeism/RosettaCodeData'
  RCD =: "$(opts.root)/RosettaCodeData"

  when-not fs-d(RCD):
    rc =:
      shell: "git clone --depth=1 $rosettacodedata-url $RCD"
    when-not rc.exit == 0:
      die: "Faile to clone '$rosettacodedata-url'"

  config =: slurp(opts.config):yaml/load
  langs =: config.langs
  lang-list =: langs.map(\(_:keys:first:S.subs(1):lc))
  lang-dict =: langs.merge(*)
  lang-info =:
    reduce _ {} langs.map(\(a(_):keys:first)):
      fn(info key):
        name =: key:S.subs(1)
        slug =: name:lc
        ext =: lang-dict.get(key)
        assoc info slug::
          name:: name
          ext:: ext

  url-task =: opts.task:S.replace('-' '_')

  merge opts::
    lang-list:: lang-list
    lang-info:: lang-info
    title:: config.title
    rcd:: RCD
    rcdt:: "$RCD/Task"
    rcdl:: "$RCD/Lang"
    markdown-file:: "ys-vs-rc-$(opts.task).md"
    self:: FILE.replace(qr(".*/"))
    url-task:: url-task

